* Жадные алгоритмы стремятся к локальной оптимизации в расчете на то, 
что в итоге будет достигнут глобальный оптимум.

* Множества похожи на списки, но множества не содержат дубликатов;

* С множествами можно выполнять различные интересные операции - вычислять их объединение, пересечение и разность.

* У задачи о коммивояжере и задаче покрытия множества есть кое-что общее: вы вычисляете каждое возможное решение 
и выбираете кратчайшее / мини­мальное. Обе эти задачи являются NР-полными.

* У NР-полных задач не существует известных быстрых решений.

* Если у вас имеется NР-полная задача, лучше всего воспользоваться при­ближенным алгоритмом.

* Жадные алгоритмы легко реализуются и быстро выполняются, поэтому из них получаются хорошие приближенные алгоритмы.

* Не существует простого способа определить, является ли задача, с которой вы работаете, NР-полной. 
Несколько характерных признаков:

- ваш алгоритм быстро работает при малом количестве элементов, но сильно замедляется при увеличении их числа;

- формулировка «все комбинации х» часто указывает на NР-полноту за­дачи;

- вам приходится вычислять всевозможные варианты Х, потому что за­дачу невозможно разбить на меньшие подзадачи? 
Такая задача может оказаться NР-полной;

- если в задаче встречается некоторая последовательность (например, последовательность городов, 
как в задаче о коммивояжере) и задача не имеет простого решения, она может оказаться NР-полной;

- если в задаче встречается некоторое множество (например, множество радиостанций) и задача не имеет 
простого решения, она может оказаться NР-полной;

- можно ли переформулировать задачу в условиях задачи покрытия множества или задачи о коммивояжере? 
В таком случае ваша задача определенно является NР-полной.