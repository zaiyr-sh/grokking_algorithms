Краткий обзор 10 алгоритмов

1. Деревья

* Бинарное дерево поиска выглядит так:
Для каждого узла все узлы левого поддерева содержат меньшие значения, 
а все узлы правого поддерева - большие значения.

* Поиск элемента в бинарном дереве поиска в среднем выполняется  за время O(log n), 
а в худшем случае - за время О(n).
./binary_tree_search.png

* У бинарных деревьев поиска есть и свои недостатки: во-первых, они не под­ держивают произвольный доступ. 
Вы не сможете потребовать: «выдайте мне i-й элемент этого дерева». 
Кроме того, в таблице приведено среднее время выполнения операций; оно зависит от сбалансированности дерева.

* Если вас интересуют базы данных или более сложные структуры данных, поищите информацию по следующим темам:
* в-деревья;
* красно-черные деревья;
* кучи;
* скошенные (splay) деревья.

------------------------------------------------------------------------------------------------------------

2. Инвертированные индексы

* Хеш-таблица, связывающая слова с местами, в которых эти слова встречаются. 
Такая структура данных, на­зываемая инвертированным индексом, часто используется для построения поисковых систем. 

------------------------------------------------------------------------------------------------------------

3. Преобразование Фурье

* Лучшая аналогия для преобразования Фурье приводится на сайте Better Explained (отличный веб-сайт, на котором 
просто объясняется математиче­ ская теория): если у вас есть коктейль, преобразование Фурье сообщает,
из каких ингредиентов он состоит. Или для заданной песни преобразование разделяет ее на отдельные частоты.

* Фурье прекрасно под­ ходит для обработки сигналов. Также оно может применяться для сжатия музыки: 
сначала звуковой файл разбивается на составляющие. Преобразо­ вание Фурье сообщает, 
какой вклад вносит каждая составляющая в музыку, что позволяет исключить несущественные составляющие.

* С его помощью можно построить аналог Shazam - приложение, которое на­ходит песни по отрывкам.

------------------------------------------------------------------------------------------------------------

4. Параллельные алгоритмы

* Следующие три темы связаны с масштабируемостью и обработкой больших объемов данных.

* Лучшее время выполнения для алгоритма сортировки равно приблизительно О(n log n). 
Известно, что массив не­ возможно отсортировать за время О(n), если толъко не восполъзоватъся 
параллельным алгоритмом! Существует параллельная версия быстрой сор­тировки, которая сортирует 
массив за время О(n).

* Выигрыш по времени не линеен. Следовательно, если процессор вашего компьютера имеет два ядра вместо одного, 
из этого не следует, что ваш алгоритм по волшебству заработает вдвое быстрее. 
Это объясняется несколькими причинами: затраты ресурсов на управление параллелизмом  и распределение нагрузки

------------------------------------------------------------------------------------------------------------

5. MapReduce

* Одна разновидность параллельных алгоритмов в последнее время становит­ся 
все более популярной: распределенные алгоритмы.  Конечно, параллель­ный алгоритм удобно запустить на компьютере, 
если для его выполнения потребуется от двух до четырех ядер, а если нужны сотни ядер? 
Тогда ал­горитм записывается так, чтобы он мог выполняться на множестве машин. 

*Алгоритм MapReduce - известный представитель семейства распределен­ных алгоритмов. Для работы с ним можно 
воспользоваться популярной системой с открытым кодом Apache Hadoop.

* Распределенные алгоритмы хорошо работают в тех ситуациях, когда вам нужно выполнить большой объем работы 
и вы хотите сократить время ее выполнения. В основе технологии MapReduce лежат две простые идеи: 
функция отображения map и функция свертки reduce.

* Функция map проста: она получает массив и применяет одну функцию к каждому элементу массива. 

* С функцией reduce массив преобразуется в один элемент.

* MapReduce использует эти две простые концепции для выполнения запро­сов на нескольких машинах. 
При использовании большого набора данных (миллиарды записей) MapReduce выдаст ответ за минуты, 
тогда как тра­диционной базе данных на это потребуются многие часы.

------------------------------------------------------------------------------------------------------------

6 - 7. Фильтры Блума и Hyperloglog

* Для решения проблемы с огромным хэшем можно воспользоваться вероятностными струк­турами данных, 
которые называются фильтрами Блума. Они дают ответ, который может оказаться ложным, 
но с большой вероятностью является правильным.

* Фильтр Блума дает ответ, правильный с высокой ве­роятностью:
* возможны ложно-положительные срабатывания. Фильтр скажет: «этот сайт уже обрабатывался», хотя этого не было;
* ложно-отрицательные срабатывания исключены. Если фильтр утверждает, что сайт не обрабатывался, 
вы можете быть в этом уверены.

* Фильтры Блума хороши тем, что занимают очень мало места. Хеш-таблице пришлось бы хранить все URL-aдpeca, 
обрабатываемые Google, а фильтру Блума это не нужно. Фильтры Блума очень удобны тогда, 
когда не нужно хранить точный ответ.

* HyperLogLog аппроксимирует количество уникальных элементов в множе­стве. Как и фильтры Блума, 
он не дает точного ответа, но выдает достаточно близкий результат с использованием малой части памяти, 
которую обычно занимает такая задача.

* Если вы используете большие объемы данных и вас устраивают прибли­женные ответы - воспользуйтесь 
вероятностными алгоритмами!

------------------------------------------------------------------------------------------------------------

8. Алгоритмы SHA

* Одну из разновидностей хеш-функций составляет алгоритм SHA (Secure Hash Algorithm). 
Он получает строку и возвращает хеш-код этой строки.

* Алгоритм SHA - хеш-функция; эта функция генерирует хеш-код, кото­рый представляет собой короткую строку. 
Хеш-функция для хеш-таблиц преобразует строку в индекс массива, тогда как SHA преобразует строку в другую строку.

* Алгоритм SHA позволяет определить, совпадают ли два файла.

* Под термином SHA скрывается целое семейство алгоритмов: SHA-0, SHA-1, SHA-2 и SHA-3. 
На момент написания книги в алгоритмах SHA-0 и SHA-1 были обнаружены слабости. 
Если вы применяете алгоритм SHA для хеши­рования паролей, выбирайте SHA-2 или SHA-3. 
В настоящее время «золо­тым стандартом» хеширования паролей считается функция bcrypt 
(хотя идеальной защиты не бывает).

* Локально-чувствительное хеширование

* У хеширования SHA есть еще одна важная особенность: оно является локально-нечувствительным. Если изменить 
в строке всего один символ, а потом сгенерировать хеш за­ново, строка полностью изменяется!

* Иногда требуется обратный результат: локально-чувствительная функция хеширования. 
Здесь на помощь приходит алгоритм Simhash. При незначи­тельном изменении строки Simhash генерирует хеш-код, 
который почти не отличается от исходного. Это позволяет сравнивать хеш-коды и определять, 
насколько похожи две строки, - весьма полезная возможность!

------------------------------------------------------------------------------------------------------------

9. Обмен ключами Диффи-Хеллмана

* Алгоритм Диффи-Хеллмана решает обе проблемы:
* знание шифра обеими сторонами не обязательно. Следовательно, им не придется встречаться и согласовывать шифр;
* расшифровать зашифрованные сообщения чрезвычайно сложно.

* Алгоритм Диффи-Хеллмана использует два ключа: открытый и закры­тый. Открытый ключ известен обеим сторонам. 
Его можно опубликовать на сайте, отправить электронной лочтой друзьям и вообще сделать с ним все, 
что вам заблагорассудится. Его не нужно скрывать. Когда другая сторона захочет отправить вам сообщение, 
она зашифрует его с примене­нием открытого ключа. Зашифрованное сообщение можно расшифровать только с закрытым ключом. 
При условии, что вы являетесь единственным владельцем закрытого ключа, никто другой расшифровать сообщение не сможет!

* Алгоритм Диффи - Хеллмана продолжает применяться на практике вместе с его наследником RSA. 
Если вы интересуетесь криптографией, алгоритм Диффи-Хеллмана станет хорошей отправной точкой: 
он элегантен и не особо сложен.

10. Линейное программирование

* Линейное программирование используется для максимизации некоторой характеристики при заданных ограничениях.

* Предположим, ваша компа­ ния выпускает два продукта: рубашки и сумки. На рубашку требуется 1 м ткани и 5 пуговиц. 
На изготовление сумки необходимо 2 м ткани и 2 пуго­ вицы. У вас есть 11 м ткани и 20 пуговиц. 
Рубашка приносит прибыль $2, а сумка - $3. Сколько рубашек и сумок следует изготовить для получения 
максимальной прибыли? Здесь мы пытаемся максимизировать прибыль, 
а ограничения определяют количество имеющихся материалов.

* Все алгоритмы, работающие с графами, могут быть реализованы средствами линейного программирования. 
Линейное программирование - намного более общая область, а задачи с графами составляют ее подмножество.